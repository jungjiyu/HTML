 HTML 은 웹 사이트의 내용을 작성하고, CSS 로는 웹 문서의 디자인을 구성한다
	: HTML 에서 다 해결하지 않고 굳이 CSS 로 style 결정하는 이유
		1. 웹 문서의 내용과 디자인이 구분되어 한쪽을 수정하더라도 다른쪽까지 수정 안해도 됨
		2. 반응형 웹 디자인을 가능하게 해줌
			: 반응형 웹 디자인 >> 어떤 기기로 접속하느냐 따라서 하나의 웹 문서의 레이아웃을 다르게 보여줌 



chrome 의 web developer 확장 프로그램
	: 공부하는데 도움 많이되니까 다운 받아라
		: 아예 css 를 disable 할 수 있는 등 신기한 기능이 많음
	: 그냥 f12 랑은 또 다른거임



CSS Cascading Style Sheet
	: 우선 순위가 있는 스타일 시트
		: 그러니까 CSS  ⊂ 스타일 시트
		: Cascade == 폭포처럼 흐르는 >> 그러니까 일종의 상하 관계. 우선순위가 있다는거
			:  ( 웹 요소에 둘 이상의 스타일을 적용할 때)  스타일끼리 충돌하지 않도록 막아주는 중요한 개념
	: 웹 브라우져에 내용을 표시할 때, 실제사용자설정 >> 개발자가 지정한 css 스타일 >> 웹 브라우져기본설정  의 순으로 우선시 되어 출력된다.
		ex)  브ㄹ라우져에선 기본적으로 흰 배경을 사용, 개발자는 웹 페이지 배경을 파란색, 사용자는 지 컴터  설정을 다크모드로 해놨으면 다크모드 배경이 우선시된다.

	: 충돌 방지 방법
		1. 스타일 우선순위 >> 스타일 규칙의 중요도와 적용 범위 따라 우선순위가 결정되고, 이에 따라 위에서 아래로 스타일ㅇ르 적용
			: 우선순위 
				: 만약에 동일한 대상대해 똑같은 우선순위로 번복해 선언한다면 , 더 뒤에 선언된 스타일이 우선시된다(==덮어쓴다)
				(1) !important
				(2) 인라인 스타일 
				(3) id 스타일
				(4) 클래스 스타일
				(5) 타입 스타일

		2. 스타일 상속 >>스타일을 위에서 아래로, 즉  부모 요소의 스타일을 자식 요소로 전달함.
			: 부모 , 자식 요소
				: 부모 element == 다른 element 를 포함하는. 감싸는 element
				: 자식 element == 다른 element 에 의해 포함당하는. 감쌈당하는 element
			: 자식 element 에 별다른 스타일 지정 없으면 부모 요소의 스타일  속성들이 자식 요소로 전달된다. 
				: 그런데 상속이 안되는 일부 속성들도 있다



		

style 이란<< 내가 봤을땐 CSS 랑 거의 동의어인것 같다. 자주 혼용됨.
	: 웹문서에서 스타일 >> HTML 문서에서 자주 사용하는 글꼴/색상/정렬 ... 등 겉모습 결정짓는거
	: 스타일 규칙 >> 속성과 값이 하나의 쌍으로 이루어지는 것. " 속성명:속성값 ; " 꼴 꼴이다
		: 만약에 속성 달랑 하나 쓸꺼면 ; 는 생략해도 된다
		: TIP
			: 기본적으로 할당 가능한 값의 종류
				: 태그에 따라서 음수 값을 할당 가능하냐 못하냐 는 좀 갈릴지라도, 전반적인 값의 종류는 비슷
				: https://everyshare.co.kr/css-%EB%8B%A8%EC%9C%84-%EC%84%A0%ED%83%9D%EA%B3%BC-%EC%82%AC%EC%9A%A9%EB%B2%95/#CSS

				: 주의 ) 상대적인 값( 단위, % ... )을 사용하는 경우 부모나 rootelement 는 절대 단위로 지정되있어야 된다. << 그래야 기준을 잡고 뭘 하지

				1. 단위 사용 << 단위를 사용한다고 다 절대크기인건 아니다!!!
					: 예전엔 절대 크기 단위를 주로 썼지만 요즘에는 상대 크기 단위를 주로 쓴다
						: 요즘엔 모바일 기기까지 고려해야되기 때문

					1) 절대 크기 단위
						1. px 픽셀
						2. pt 포인트
			

					(2) 상대 크기 단위
						: em, rem
							1. em : 부모 element 의 크기를 기준으로 비율 설정 
								: em 의 경우 부모들에 따라 그 크기가 제각각 달라짐으로 여러 element 에 대해 통제가 어렵다  >> em 보단 rem 을 더 쓰는 추세
							2. rem: root element , 즉 <HTML> 의 크기를 기준으로 비율 설정
								: em 보다는 통제, 예측이 훨 쉽다

						: 뷰포트 상대 단위
							: 뷰포트(Viewport) == 웹 페이지 표시되는 브라우저 창의 실제 화면 영역. 사용자가 웹 페이지를 스크롤하거나 확대/축소할 때 변경될 수 있음
								: 반응형 웹의 구현을 가능하게함
			
							1. vw
								: 뷰포트 width 를 기준으로 비율 설정
								: Viewport Width

							2. vh
								: 뷰포트 Height 를 기준으로 비율 설정
								: Viewport Height

							3. vmin 
								:  뷰포트 width, 뷰포트 Height 중 더 작은걸 기준으로 비율 설정
								: Viewport Minimum

							3. vmax
								:  뷰포트 width, 뷰포트 Height 중 더 큰걸 기준으로 비율 설정
								: Viewport Maximum




					2.  백뷴율 사용 : 부모element 의 크기를 기준으로 계산된다

		: 대표적인 속성
			0. 출력 관련
				(1) display : element 를 어떻게 보여줄지 결정
					none )  자리도 아예 차지 안하고, 안보임. 
					block) 해당 element 가 div 이런 것 처럼 block element 가 되게 함
					inline )  해당 element 가 span 이런 것 처럼 block element 가 되게 함

				(2) visiblity
					hidden ) 한 줄을 차지하긴 하는데, 안보임

			1. 색관련
				: #16진수 혹은 색이름 할당 가능
				(1) color : 글자 색 지정
					: 주의 ) font-color 는 없다
				(2) background-color : 배경색 지정

			2. 공백, 간격 ,줄바꿈 관련
				: tip
					: https://eunyoe.tistory.com/105
					: 가운데 정렬한다고 해서 그게 세로&&가로 가운데 정렬이라는게 아닐 가능성이 높다. 세로 가운데 정렬, 가로 가운데 정렬 대부분 각각 나뉘어 있는 편이다

			
				: https://velog.io/@ursr0706/line-height-%EC%86%8D%EC%84%B1

				(0) line-height	
					: 텍스트 라인의 "높이"를 설정하는 속성. 
						: 이걸 조절하면 폰트 세로 사이즈 까지 함께 증감되는건 아니고 leading 영역의 크기가 조절되는 거다 
						: 텍스트 라인 높이= half leading + font-size + half leading 
							leading 영역: 텍스트 박스의 경우 글자 쓰고 남는 위아래 영역을 통틀어 leading 영역이라고 한다. 위 아래 각각은 각각 half leading 영역이라고 한다. 이름이 " half " 라고 실제로 딱 반반인건 아니고, 영역의ㅡ 크기를 다르게 할 수 있다

					: 사용하는 경우
						1. 텍스트 라인과 라인간의 간격조정위해서
						2. 해당 텍스트 라인을 텍스트 박스의 정중앙에 배치하기 위해서

					: 할당 가능한 값 
						1. 쌩숫자 << 텍스트 라인과 라인간의 간격 조정이 목적이면 이거 강추
							: 폰트 크기에 비례하여 설정된다
								ex)  1== 폰트 높이 그 자체
								ex) 1.5 == 폰트 높이의 1.5배

						2. 기본적으로 할당 가능한 값은 다 할당 가능 << 해당 텍스트 라인을 텍스트 박스의 정중앙에 배치하는게 목적일 경우 강추
							: line-height 값을 해당 요소의 height 값과 동일하게 하면 해당 박스의 위 아래 부분 딱 정중앙에 오게 된다

						3. 키워드 
							: normal >> 폰트제작자가 기본으로 설정해둔 값을 의미한다. 보통 이건 사용 안하는걸 추천하는것이, 폰트 마다 line-height ㄱ값이 제각각이라 미를 해칠수도 있다
							

				(1)  text-align
					: 박스 내부 텍스트의 가로 정렬을 위해 사용 
						: padding 과 비슷한 역할 << 그렇다고 padding 이랑 똑같은건 아님. padding 은 padding 영역을 설정하는 거지만 text-align 은 padding 영역 ㅅ설정이 아닌 content 영역 설정임

					: 할당 가능한 값
						1.center >> 양옆 방향 기준 정중앙에 온다
							: 만약에 위 아래 까지 정중앙에 오게하고 싶으면 line-height 까지 같이 써준다

				(2) padding
					: 테이블의 셀 내부 데이터 와 셀 border 사이의 간격 조절
					: 종류
						1.padding-top
						2.padding-right
						3.padding-bottom
						4.padding-left

					: 축약표현
						(1) padding: 위 오른 밑 왼;
						(2) padding: 위밑 오른왼 ;
							: 그러니까 2개의 값만 명시해서 위와밑의값, 오른과왼값 지정 
						(3) padding: 다통틀어서;
							: 그러니까 위오른밑왼 다 한번에 같은 값으로 지정

					: 할당 가능한 값 <<center, auto 없음 주의
						: 기본적으로 할당가능한 값 빼곤 트별한거 딱히 없음


				(3)  margin
					: 테이블의 셀 과 셀 간의 border 사이의 간격 조절
					: 종류
						1.margin-top
						2.margin-right
						3.margin-bottom
						4.margin-left

					: 축약표현
						(1) margin: 위 오른 밑 왼;
						(2) margin: 위밑 오른왼;
							: 그러니까 2개의 값만 명시해서 위와밑의값, 오른과왼값 지정 
						(3) margin: 다통틀어서;
							: 그러니까 위오른밑왼 다 한번에 같은 값으로 지정


					: 할당 가능한 값<<center 없음 주의
						:  특이하게  기본적으로 할당가능한 값으로 음수 값을 할당 가능함. 음수값을 부여하면  다른 element 와 겹치게 할 수 있음

			*****(4) transform
					: https://eunyoe.tistory.com/105
					: https://it-eldorado.tistory.com/110
					: CSS의 시각적 서식 모델의 좌표 공간을 변형하는 역할을 수행한다
						:   엘리먼트에 회전, 크기 조절, 기울이기, 이동 효과 등을 부여할 때 사용한다. 
					: 하나 이상의 변형 함수 transform function 를 지정할 수 있다. 
						: 변형 함수
							: 말 그대로 변형하는 기능을 가진 함수이다
							: 여러 개의 변형 함수를 함께 사용 가능하다
								: 오른쪽 변형 함수부터 적용이 된다. 
								: ';' 는 마지막에 한 번만 쓰는거지, 함수와 함수 마다 쓰는게 아님을 주의

							: 종류
								1.  회전 
									: 각도값
										: ° 기호를 쓰진 않고, deg 라는 기호를 사용하여 나타낸다
											 ex) 180 ° 이면 180deg 을 씀 된다
										: 음수값도 쓸 수 있고, 그만큼 반시계방향으로 회전한다
										: 360 넘는 값도 쓸 수 있고, 그만큼 실제로 회전한다
											: 애니메이션 효과 넣을떄 빠르게 돌게 하고 싶으면 각도값을 ㅈㄴ 크게 하면 된다
											 ex) 400 deg == 360deg + 40deg 이므로 한바퀴 돌고 나머지 40도 까지 돈다 

		
 									(1)  rotateX( 각도값 ) : 	가로를 축으로 하여 회전
									(2)  rotateY( 각도값 ) : 세로를 축으로 하여 회전			
									(3)  rotate( 각도값 ) : z축 기준으로 회전			
			
								2.  scale( ) : 크기
									scaleX( 확대정도 ) : 가로 방향으로만 n배 확배
									scaleY( 확대정도 ) : 세로 방향으로만 n 배 확베
									scale( x방향확대정도 , y방향확대정도 ) : 가로 방향으로 n배, 세로 방향으로 m배 확대

								3.  skew( ) : 왜곡하기
									: 마찬가지로 각도값은 숫자deg 의 형식으로 쓴다
									skewX(왜곡각도값)
									skewY(왜곡각도값)
									skew(왜곡각도값, 왜곡각도값)

								4.  이동
									translateX( 이동값 ) 
										: 원래 위치에서 X 방향으로 이동값만큼 이동한다
										: 이동값이 양수면 오른쪽 음수면 왼쪽으로 이동한다

									translateY( 이동값 ) 
										: 원래 위치에서 Y 방향으로 이동값만큼 이동한다
										: 이동값이 양수면 아래쪽 "음수"면 "위쪽"으로 이동한다
											: y축이 아래쪽으로 양수임 주의

									translate( x축이동값 ,y축이동값) 
										: 원래 위치에서 X, Y 방향으로 이동값만큼 이동한다
										: 마찬가지로 y축이동값은 음수여야 위쪽으로 이동




				(5) position
					: https://creamilk88.tistory.com/197
					: 박스 자체를 세로 방향 정렬할때 쓰인다	
						: margin 과 비슷 성질. << 그렇다고 완전 똑같은건 아님. margin영역 밖의 영역이 position 영역임.
						: 박스 내부 컨텐츠를 정렬할때 쓰는거 아니다

					: 할당 가능한 값
						기준점 잡는 값
							(1) absolute : 현재 태그의 부모 요소 중 position 속성을 가지는 가장 가까운 요소를 기준으로 배치
								: 부모 태그의 position 을 기준으로 위 아래 오 왼 이동 가능
								: 만약에 모든 부모 태그가 position 속성을 가지고 있지 않으면  viewport를 기준점으로삼는다. 
									: absolute로 viewport 를 기준으로 사용 가능한 건 맞는데 그러고 싶으면 걍 absolute 말고 fix 를 써라

							(2) relative : 현재 태그 자기 자신을 기준으로 배치
								: static 이었으면 있었을 자신의 자리를 기준으로 위 아래 오 왼 이동 가능하다

							(3) fixed: 뷰포트 기준으로 배치
								: 페이지 레이아웃에 어떠한 공간도 배정하지 않는다. 페이지 레이아웃 바깥 부분에 배정받게 된다

							(4) static : 정렬 없이 걍 원래의 기본적인 정렬을 사용하고 싶을떄 사용
								: 디폴트 값이므로 이값 쓸꺼면 걍 position 속성을 쓰지 마라
								: 이름이 비슷해서 그렇지 fixed 랑은 또 다른거임 주의

					: 같이 사용하는 속성
						: ' ; ' 로 끊어쓰는거 주의 << bottom, right .. 는 속성이지 값이 아니다
							ex)
								position: relative;
							 	bottom:40px;
								right:90px;

						:설정한 기준점을 기준으로 어느 방향의 정렬을 설정할건지 선택한다.  기본적인 값을 할당 가능하다
							(1) top
							(2) bottom
							(3) left
							(4) right


			3. 글씨체  관련
				(1) font-style
					: 글자 기울기 효과 (itallic)줌
						: 명색이 font-style 이지만 기울기 이외엔 다른 효과 없음
					: 할당 가능한 값>> italic 

				(2) font-family
					: 특정 글꼴 지정
					: font-family: "글꼴명1" , "글꼴명2" , ... ; 의 형식으로 값 할당
						: 앞쪽에 선언된 글꼴을 우선적으로 적용함. 만약에 해당 글꼴을 실제유저(컴퓨터)가 보유하고 있지 않다면 그 다음에 선언된 글꼴을 적용하게 됨. 그러니까 글꼴명2 ,.. 는 대비책.
						: 글꼴명 마다 "" 를 꼭 써주진 않아도 되지만, 해당 글꼴명에 띄어쓰기가 들어가는 경우 "" 로 꼭 묶어줘야됨	
							: ex)  font-family: "맑은 고딕" , 돋움 , 굴림 ; 
							: 주의) "글꼴명1 , 글꼴명2.. , 글꼴명n" 처럼 쉼표까지 " " 로 묶으면 안된다.				

				(3) color : 글자 색 지정
					: 주의 ) font-color 는 없다

				(4)line-height : 윗 문장과 아랫 문장 간의 줄 간격을 설정하는 것. 문자가 아닌 다른 요소들 간의 간격 설정으론 사용 불가.

				(5)  text-align  : 글자 정렬
					: 할당 가능한 값
						1.center

				(6) font-weight : 글자 굵기 설정
					: 할당 가능한 값
						: 특이하게 기본적인 값( 단위, 백분율 등)을 할당 못함
						1. 키워드 
							(1) normal : 보통. 400 값.
							(2) bold: 두껍게. 700 값.
							(3) lighter: 얇게. 100값.

						2. 100 <= <=900 의 '숫자'



				(7) font-size : 글자 크기 설정
					: 할당 가능 한 값
						1. 기본적으로 할당 가능한 값
						2. 키워드 
							: xx-small , x-xmall, medium , lage , x-large, xx-large


			4. 두께, 경계관련
				(0) font-weight
					: 글자 굵기 설정
				(1) border
					: " 픽셀값 solid 색 " 의 형태로 쓴다
				(2) border-width
					: 테두리 두께 설정
					: border-width:2px 2px 3.5px 2px;  와 같이 테두리 두께를 각 변마다 설정 가능
						: 위 - 오 - 아래 - 왼 순

				(3) border-collapse: collapse;
					: 테이블 셀 끼리 굳이 간격 띄우지ㅣ 않고 한줄로 표현


			5. 크기 관련
				(1) width, height
					: 기본적으로는(== 별도로 box-sizing:border-box 없으면 ) 박스 모델에서 (border, padding, margin 은 다 제외한) 컨텐츠 영역만의 크기이다
						: 그냥 얘네만 쓰면 border, padding, margin은 또 따로 고려해야된다
					: 기본적인 값 할당 가능

				(2) box-sizing << width, height 쓸꺼면 box-sizing:border-box; 와 함께 쓰는걸 추천
					: 키워드만 할당 가능
						1. border-box : 해당 요소의 사이즈 관련 설정( width, height )할 때 컨텐츠 영역 뿐 아니라 border, padding, margin 까지 종합적으로 고려한다
						2. content-box << box-sizing 을 안쓰면 기본적으로 이게 적용됨. 이거 쓸꺼면 걍 box-sizing 속성 자체를 안쓰는걸 추천


			6. 기타 이팩트
				: box-shadow
					: 박스 모델 바깥 부분에 그림자 효과를 줄 수 있다
					: 할당 가능한 값
						: " box-shadow: 수평거리 수직거리 흐림정도 번짐정도 색상 inset ; "과 같이 한번에 값 여러개 할당 가능
					
						(1) 수평,슈직 거리
							: 필수 값
							: 그림자가 가로, 세로로 얼마나 떨어져 있는지 나타낸다. 음수값을 줄 수 있는데 음수값을 주면 왼쪽. 위쪽에 그림자를 만들고 양수값은 오른쪽, 아래쪽에 그림자를 만든다
						
						(2) 흐림 정도 : 음수값은 할당 못하고, 특이하게 값이 커질수록 부드러워진다

						

	: !important
		: 속성과 값 명시할떄  값 바로 뒤에 ( ' ; ' 가 끝나기 전에) !important 를 쓰면 해당 속성이 (인라인 스타일보다도) 우선시 된다
		: ex) background-color: black ! important;

	: 주석 처리 /* */
		: 한줄이든 여러줄이든 다 저거로 처리한다 
		: 주의 ) .css 파일에서만 사용 가능한거다

	style sheet 스타일 시트
		: 스타일 규칙을 한눈에 확인하고 수정하기 쉽도록 한군데 묶어 놓은 것
		: 스타일 시트라고 다 .css 인건 아니다
			: 내부 스타일 시트 같은 경운 html 의 헤더 부분에 작성되는거다

	: 종류
		(1) 브라우저 기본 스타일 : 우리가 따로 CSS 설정안했을떄 브라우져가 기본적으로 사용하는 스타일 

		(2) 사용자 스타일
			1. 인라인 스타일 :  스타일을 적용할 대상에 style "속성"을 이용해 직접 표시하는 것
				: 간단한 스타일 정보의 경우 사용한다
				: style="속성명1:속성값1; 속성명2:속성값2 ; .. " 이런식으로 씀 된다
					: 속성 하나만 적용하더라도 ; 는 쓰는거다

			2. 내부 스타일 시트 : 해당 웹 문서(.html)의 <head> 내부에 <style> "태그"를 이용하여 스타일 규칙을 정리해놓은 것
				style 태그
					:  내부 형식
						선택자 { 속성1: 속성값1, 성성2: 속성값2; }
							: 선택자 >> 스타일을 어느 부분에 적용할 것인지 알려주는것
								: 자주 쓰이는 선택자 종류
									(1) * 
										: 전체 선택자 Universal selector
										: 스타일을 대상 문서의 모든 요소에 적용할 때 사용
									(2)  특정태그명
										: 타입 선택자 type selector
											: 요소 선택자 element selector , 태그 선택자 tag selector 라고도 한다
											: html 도 타입 선택자로 사용 가능.
											: "특정 태그"의  "모든" "요소"에 스타일을 적용할때 사용
											:  style 을 적용한다고 할때는.  " χ 태그에 style 을 적용한다 " 가 아닌 , " χ (태그의) 요소에 style 을 적용한다" 라고 해야된다
												: 소스코드의 태그 자체에 스타일을 적용시키는게 아니라, 태그의 내용이되는 것들에 대해 스타일을 적용하는거니까
												: 태그tag 와 요소 element 의 차이점
													: 태그 >> 말 그대로 태그 그 자체 
														: ex ) <p> , </p>
													: 요소 >> 태그를 적용한 것.
														: ex) <p>안녕하세요</p>

									(3) 선택자1, 선택자2 ..
										: 그룹 선택자 group selector
										: 여러 선택자가 같은 스타일 규칙을 사용하는 경우 한꺼번에 정의 가능하다
										: 이 경우 선택자1, 선택자2 , .. 는 대게 특정태그명이다


									(3) .클래스명
										: 클래스 선택자 class selector
										: 앞에 '.' 붙이는거 주의
										: "특정" "요소" "들"에  스타일을 적용할때 사용
											: 태그의 종류 상관없이 한 문서 내부에서 여러 요소에 적용 가능하다
										: 클래스 스타일을 적용할 요소의 태그부분에 class="클래스명" 해서 해당 요소에 적용시킬 수 있다
											: 클래스 스타일 ) 클래스 선택자를 사용해 만든 스타일
											: 하나의 요소에 여러 클래스 스타일 을 동시에 적용시킬 수 있다
												: 이경우 각 클래스명은 공백으로 구분하여 쓴다
													: ex) class ="클래스명1 클래스명2"
									(4) #아이디명
										: id 선택자 id selector
										: 앞에 # 붙이는거 주의
										: "특정" "요소" 딱 "하나"에만 스타일 적용가능하게 할떄 사용
											: 태그의 종류 상관없는데, 한 문서서 딱 한 요소에만 적용 가능하다
										: 아이디 스타일을 적용할 요소의 태그 부분에 id="아이디명" 헤서 해당 요소에 적용시킬 수 있따
											: 아이디 스타일 ) id 선택자를 이용해 만든 스타일

										:  언제 사용
											1. 문서의 레이아웃 설정
											2. 요소의 식별자


							: { } >> 내부엔 스타일 규칙(정보)가 들어간다
								: 하나의 { } 내부에 여러개의 스타일 규칙이 들어갈 수 있다
								: 각 쌍이 ';' 로 구분되기 때문에 , 내부에 얼마든지 가독성 위해 엔터 쳐도 된다


			3. 외부 스타일 시트: 여러 웹 문서에서 사용할 스타일을 별도 파일(.css)로 저장해놓고, 적용시킬 웹 문서에서 <link> "태그"를 이용하여 연결시키는것.
				: css 파일엔 style 태그 없이, style 태그 내부에 들어갈 내용( 선택자 { 속성1: 속성값1, 성성2: 속성값2; } )을 걍 적어줌 된다
				: <link> 태그 
					: 현재 문서와 외부 리소스 사이의 관계를 명시한다
					: 속성
						1. rel
							: RELation 을 의미.
							: href 경로의 리소스와 현재 문서의 관계를 명시한다. 
								: 그러니까 현재 문서에서 href 경로의 외부 리소스가 어떤 역할로 쓰일지 명시한다.
								: href 경로의 파일을 사용하기 위해선 필수적으로 써줘야됨. 안그럼 적용이 안됨
							: 할당 가능한 값
							   ****(1) stylesheet >> href 경로 파일은 stylesheet 로 사용될거다
								(2) 기타
									: https://www.tcpschool.com/html-tag-attrs/link-rel

						2. href
							: 외부리소스의 경로를 명시한다
				



-----------------------------------------------------------------------------------------------------------------------------------

웹 폰트 Web font
	: 웹 사이트에 적용되는 폰트
	: 웹 문서와 함께  웹 폰트를 올리면, 해당 웹 문서를 받을때 자동으로 웹 폰트가 유저의 컴퓨터에 다운로드 되서, 유저의 컴퓨터에 해당 글꼴이 설치되어있지 않더라도 폰트 적용이 가능하다

	: 적용 방법
		1. 링크만 명시해서 사용
			: 인터넷 사이트에서 제공하는  구글 웹 폰트 같은건 직접 업로드 하지 않고 링크만 명시해서 쓸 수 있다
			: 왜 그런지 몰라도 @font-face 보다 더 뒤에 선언되면 인식이 안되므로 젤 앞에 선언한다
			: 해당 인터넷 사이트에서 코드 긁긁 해서 style 태그 혹은 css 파일 내부에 복붙함 된다.
				: 형식) @import url('웹사이트주소'); 

			: 우리가 html 파일에서 해당 폰트를 어떤 이름으로 사용할건지 지정할 순 없다. 인터넷에서 제공하는 이름 그대로 써야된다
				ex) @import url('https://fonts.googleapis.com/css2?family=Black+Han+Sans&display=swap') 같은 경우는 url 에 표시된걸 보면 알 수 있듯이 font 명이 "Black Han Sans" 이므로 font-family="Black Han Sans" 와 같이 사용한다. 물론 그냥 해당 웹 사이트에 표시된 이름을 읽음 된다
					: + 는 띄어쓰기 나타내는거다


		2. 개발자가 가진 폰트 파일을 직접 내장시킴


			:폰트파일의 종류 >> 웹 폰트론 TTF 보단 woff 를 추천
				(1) TTF True Type Font
					: 컴퓨터에 설치하여 사용하는 글꼴 
					: 적용할 수 있긴 한데 용량이 커서 그대로 웹에서 사용하는건 비추다 
						: 따로 해당 ttf 파일을 인터넷 converter 사이트( 그중에서도 특히 https://transfonter.org/ << 한글도 지원) 변환시켜서 woff 나 EOT로  업로드 하는걸 추천한다 

					: 확장자는 .ttf

				(2) WOFF Web Open Font Format
					: ttf보다 훨씬 용량 적고 , 확장자는 .woff 다
				(3) EOT Embedded Open Type
					: ttf보다 훨씬 용량 적고 , 확장자는 .eot 다


		: 형식
			@font-face {
				font-family: '직접지은폰트명' ;
				src: url('해당폰트파일이저장되있는경로') format('해당폰트파일의포맷종류');
			}



			: 직접 해당 폰트명을 지을 수 있는건 좀 좋은듯
			: src 의 경우 브라우져 호환성을 위해 여러개 적어놔도 된다
				: 그러니까 브라우져마다 지원하는 폰트파일의 포맷 종류가 다를 수 있으니 해당 폰트에 대해 여러 유형의 파일의 src를 명시해도 된단 거다

			: 폰트파일의 포맷 종류 
				: 주의 ) URL 의 폰트파일의 형식에 맞춰 포맷의 종류를 명시하는거다. URL 의 폰트 파일을 format( ) 에 명시된 포맷으로 포맷 시켜 주겠단 의미가 아니다 
					: 그러니까 TTF 파일이 아닌 woff 포맷으로 올리고 싶음 직접 woff 파일을 생성하고 그 파일의 URL 을 명시해야된다.

				1. truetype >> 폰트 파일이 TTF 파일 일 경우
				2. woff >> 폰트 파일이 woff 파일 일 경우



-----------------------------------------------------------------------------------------------------------------------------------
블록 레벨 요소 와 인라인 레벨 요소
	Block-level 요소
		: 태그를 사용해 요소를 삽입했을때 혼자 한줄을 차지(== width 가 100%)하는 것
		: div , p 등

	inline-level 요소
		: 콘텐츠 만큼만 영역을 차지 하고 , 해당 줄의 남는 영역엔 다른 요소가 올 수 있는 것
		: span , input 등



CSS 박스 모델 : 웹 문서의 내용을 박스 형태로 정의하는 방법. 박스 모델들이 모여 웹 문서를 이루게 된다 
	: 박스 모델을 잘 알아야 원하는 위치에 컨텐츠를 배치할 수 있다

	: 박스 모델의 기본 구성 << f12 개발자 모드 elements computed 에서 확인 가능
		콘텐츠영역
		border
		padding(== 테두리와 콘텐츠의 간격)
		margin(== 박스 모델간의 간격)

	: width, height 속성은 박스 모델에서 (border, padding, margin 은 다 제외한) 컨텐츠 영역의 크기이다
		: 따라서 width, height 만 고려해서 설계하면 안되고, border, padding, margin 도 따로 고려해서 설계해야된다


 -----------------------------------------------------------------------------------------------------------------------------------

css minify, css compress  CSS소스 경량화
	: CSS 소스의 주석이나 줄 바꿈 같은거 제거하하고, 꼭 필요한 정보만 남겨서 파일을 작게 만드는것.
		: CSS 소스는 네트워크를 이용해 파일로 내려받아짐으로 되도록 파일 크기가 작은게 좋다
			: 물론 공부할땐 굳이 이렇게 할 필욘 없다
	: 인터넷에 ( css minify, css compress ) 쳐서 나오는 툴 이용함 쉽게 경량화 된다

 

-----------------------------------------------------------------------------------------------------------------------------------




